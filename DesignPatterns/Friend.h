#pragma once
#include <iostream>
using namespace std;
/*************************************************************************************************/

class D;
class C
{
	friend class D;
public:
	inline void display() { cout << "iamC" << endl; }
};

class D
{
public:
	C c;
};

/*************************************************************************************************/
//全局函数做友元
class Building
{
	//告诉编译器 goodGay全局函数 是 Building类的好朋友，可以访问类中的私有内容
	friend void goodGay(Building * building);

public:
	Building()
	{
		this->m_SittingRoom = "客厅";
		this->m_BedRoom = "卧室";
	}
public:
	string m_SittingRoom; //客厅
private:
	string m_BedRoom; //卧室
};


void Friendmain();

/*************************************************************************************************/
//类做友元
/*
class Building;
class goodGay
{
public:
	goodGay();
	void visit();
private:
	Building *building;
};


class Building
{
	//告诉编译器 goodGay类是Building类的好朋友，可以访问到Building类中私有内容
	friend class goodGay;
public:
	Building(); //默认构造函数
public:
	string m_SittingRoom; //客厅
private:
	string m_BedRoom;//卧室
};

//也可以在类外定义这些成员函数
Building::Building()
{
	this->m_SittingRoom = "客厅";
	this->m_BedRoom = "卧室";
}

goodGay::goodGay()
{
	building = new Building; //这里就直接构造了一个Building对象
}

void goodGay::visit()
{
	cout << "好基友正在访问" << building->m_SittingRoom << endl;
	cout << "好基友正在访问" << building->m_BedRoom << endl;
}

void test01()
{
	goodGay gg;
	gg.visit();

}

int main() {
	test01();
	return 0;
}
*/

/*************************************************************************************************/
//成员函数做友元
/*
class Building;
class goodGay
{
public:
	goodGay();
	void visit(); //只让visit函数作为Building的好朋友，可以发访问Building中私有内容
	void visit2();
private:
	Building *building;
};

class Building
{
	//告诉编译器  goodGay类中的visit成员函数 是Building好朋友，可以访问私有内容
	friend void goodGay::visit();

public:
	Building();
public:
	string m_SittingRoom; //客厅
private:
	string m_BedRoom;//卧室
};

Building::Building()
{
	this->m_SittingRoom = "客厅";
	this->m_BedRoom = "卧室";
}

goodGay::goodGay()
{
	building = new Building;
}

void goodGay::visit()
{
	cout << "好基友正在访问" << building->m_SittingRoom << endl;
	cout << "好基友正在访问" << building->m_BedRoom << endl;
}

void goodGay::visit2()
{
	cout << "好基友正在访问" << building->m_SittingRoom << endl;
	//cout << "好基友正在访问" << building->m_BedRoom << endl;  //非友元成员函数不能访问
}

void test01()
{
	goodGay  gg;
	gg.visit();
	gg.visit2();
}

int main() {
	test01();
	return 0;
}

*/